package com.javaee.test1.controllers;

import com.javaee.test1.models.User;

import java.sql.*;
import java.util.ArrayList;
import java.util.UUID;

public class UserDAO {

    private static final String CONNECTION_URL = "jdbc:sqlserver://localhost:1433;databaseName=ChatSystemDB;encrypt=true;trustServerCertificate=true;username=sa;password=123";

    public static Connection getConnect() {
        try {
            return DriverManager.getConnection(CONNECTION_URL);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private User mapResult(ResultSet rs) throws SQLException {
        return new User(UUID.fromString(rs.getString("UserIDd")), rs.getString("Email"), rs.getString("PasswordHash"), rs.getString("Username"), rs.getString("Avatar"), rs.getString("Role"), rs.getString("SubscriptionPlan"), rs.getTimestamp("CreatedAt"), rs.getTimestamp("LastActive"), rs.getBoolean("IsActive"));
    }

    private ArrayList<User> executeQuery(String query, Object... params) {
        ArrayList<User> list = new ArrayList<>();
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            for (int i = 0; i < params.length; i++) {
                ps.setObject(i + 1, params[i]);
            }
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                list.add(mapResult(rs));
            }
            rs.close();
        } catch (SQLException e) {
            throw new RuntimeException("L·ªói khi th·ª±c thi truy v·∫•n: " + query, e);
        }
        return list;
    }

    private int executeUpdate(String query, Object... params) {
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            for (int i = 0; i < params.length; i++) {
                ps.setObject(i + 1, params[i]);
            }
            return ps.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("L·ªói khi th·ª±c thi truy v·∫•n: " + query, e);
        }
    }

    public ArrayList<String> loadConversation(UUID userId) {
        String query = "SELECT ConversationID, Title FROM ChatHistory WHERE UserID = ? ORDER BY CreatedAt DESC";
        ArrayList<String> conversationName = new ArrayList<>();
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {

            ps.setObject(1, userId);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                UUID conversationId = UUID.fromString(rs.getString("ConversationID"));
                String title = rs.getString("Title");
                conversationName.add(title);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conversationName;
    }

    // ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
    public boolean isOldPasswordCorrect(String email, String oldPassword) {
        String query = "SELECT * FROM Users WHERE Email = ? AND PasswordHash = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, email);
            ps.setString(2, oldPassword);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // üîÑ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    public boolean updatePassword(String email, String newPassword) {
        String query = "UPDATE Users SET PasswordHash = ? WHERE Email = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, newPassword);
            ps.setString(2, email);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // H√†m ki·ªÉm tra ƒëƒÉng nh·∫≠p
    public boolean validateUser(String usernameOrEmail, String password) {
        String query = "SELECT * FROM Users WHERE (Email = ? OR Username = ?) AND PasswordHash = ?";

        try (Connection conn = getConnect(); PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, usernameOrEmail);
            stmt.setString(2, usernameOrEmail);
            stmt.setString(3, password);  // ‚ùó Th·ª±c t·∫ø n√™n hash password, v√≠ d·ª• SHA-256

            ResultSet rs = stmt.executeQuery();
            return rs.next();  // C√≥ d·ªØ li·ªáu nghƒ©a l√† ƒëƒÉng nh·∫≠p ƒë√∫ng

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // ‚úÖ H√†m c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    public boolean updateUserInfo(UUID userId, String newUsername, String newEmail, String newAvatar) {
        String query = "UPDATE Users SET Username = ?, Email = ?, Avatar = ? WHERE UserID = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, newUsername);
            ps.setString(2, newEmail);
            ps.setString(3, newAvatar);
            ps.setString(4, userId.toString());
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // 1Ô∏è‚É£ Ki·ªÉm tra Email c≈© c√≥ t·ªìn t·∫°i kh√¥ng
    public boolean checkEmailExists(String email) {
        String query = "SELECT COUNT(*) FROM Users WHERE Email = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
//2Ô∏è‚É£ C·∫≠p nh·∫≠t Email

    public boolean updateEmail(String oldEmail, String newEmail) {
        String query = "UPDATE Users SET Email = ? WHERE Email = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, newEmail);
            ps.setString(2, oldEmail);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    //1Ô∏è‚É£ Ki·ªÉm tra Username c√≥ t·ªìn t·∫°i kh√¥ng
    public boolean checkUsernameExists(String username) {
        String query = "SELECT COUNT(*) FROM Users WHERE Username = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
    public boolean isOldPasswordCorrectuser(String user, String oldPassword) {
        String query = "SELECT * FROM Users WHERE Username = ? AND PasswordHash = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, user);
            ps.setString(2, oldPassword);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // üîÑ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    public boolean updatePassworduser(String user, String newPassword) {
        String query = "UPDATE Users SET PasswordHash = ? WHERE Username = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, newPassword);
            ps.setString(2, user);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // L·∫•y username theo email (tr√°nh ch·ªânh s·ª≠a username tr·ª±c ti·∫øp)
    public String getUsernameByEmail(String email) {
        String query = "SELECT Username FROM Users WHERE Email = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getString("Username");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // L·∫•y t√™n cu·ªôc tr√≤ chuy·ªán theo ConversationID
    public String getConversationTitle(UUID conversationId) {
        String query = "SELECT Title FROM ChatHistory WHERE ConversationID = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setObject(1, conversationId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("Title");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // C·∫≠p nh·∫≠t t√™n cu·ªôc tr√≤ chuy·ªán
    public boolean updateConversationTitle(UUID conversationId, String newTitle) {
        String query = "UPDATE ChatHistory SET Title = ? WHERE ConversationID = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, newTitle);
            ps.setObject(2, conversationId);
            return ps.executeUpdate() > 0; // >0 nghƒ©a l√† update th√†nh c√¥ng
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Th√™m ng∆∞·ªùi d√πng v√†o database
    public boolean createUser(String email, String username, String password, String avatar) {
        String sql = "INSERT INTO Users (Email, PasswordHash, Username, Avatar) VALUES (?, ?, ?, ?)";

        try (Connection conn = getConnect(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, email);
            pstmt.setString(2, password); // C√≥ th·ªÉ th√™m m√£ h√≥a m·∫≠t kh·∫©u ·ªü ƒë√¢y
            pstmt.setString(3, username);
            pstmt.setString(4, avatar);

            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.out.println("L·ªói khi th√™m ng∆∞·ªùi d√πng: " + e.getMessage());
            return false;
        }
    }

    // H√†m x√≥a ng∆∞·ªùi d√πng trong UserDAO
    public boolean deleteUserById(UUID userId) {
        String sql = "DELETE FROM Users WHERE UserID = ?";

        try (Connection conn = getConnect(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setObject(1, userId);
            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.out.println("L·ªói khi x√≥a t√†i kho·∫£n: " + e.getMessage());
            return false;
        }
    }

    public User getUserById(UUID userId) {
        if (userId == null) {
            System.out.println("L·ªói: userId truy·ªÅn v√†o l√† null");
            return null;
        }

        String sql = "SELECT * FROM Users WHERE UserID = ?";

        try (Connection conn = getConnect(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

            if (conn == null) {
                System.out.println("L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi database.");
                return null;
            }

            pstmt.setObject(1, userId); // UUID ph·∫£i d√πng setObject

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new User(
                            rs.getObject("UserID", UUID.class), // C√°ch cast ƒë√∫ng
                            rs.getString("Email"),
                            rs.getString("PasswordHash"),
                            rs.getString("Username"),
                            rs.getString("Avatar"),
                            rs.getString("Role"),
                            rs.getString("SubscriptionPlan"),
                            rs.getTimestamp("CreatedAt"),
                            rs.getTimestamp("LastActive"),
                            rs.getBoolean("IsActive")
                    );
                }
            }
        } catch (SQLException e) {
            System.out.println("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: " + e.getMessage());
        }
        return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y user
    }

    public boolean deleteAllConversations(UUID userId) {
        String query = "DELETE FROM ChatHistory WHERE UserID = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setObject(1, userId);
            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0; // Tr·∫£ v·ªÅ true n·∫øu c√≥ d√≤ng b·ªã x√≥a
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    ///x√≥a t·∫•t c·∫£ c√°c cu·ªôc h·ªôi tho·∫°i
    //Nang c·∫•p g√≥i
    public boolean updateSubscriptionPlan(User user, String newPlan) {
        String query = "UPDATE Users SET SubscriptionPlan = ? WHERE UserID = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, newPlan);
            ps.setObject(2, user.getUserID());
            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0) {
                user.setSubscriptionPlan(newPlan); // C·∫≠p nh·∫≠t object trong b·ªô nh·ªõ
                return true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }


    public User getUserInfoByUsername(String username) {
        String query = "SELECT UserID,PasswordHash, Email, Avatar, Username, SubscriptionPlan FROM Users WHERE Username = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return new User(
                        rs.getObject("UserID", UUID.class), // L·∫•y UserID d·∫°ng UUID
                        rs.getString("Email"), // C√°c tr∆∞·ªùng kh√°c kh√¥ng c·∫ßn thi·∫øt
                        rs.getString("PasswordHash"),
                        rs.getString("Username"),
                        rs.getString("Avatar"),
                        null,
                        rs.getString("SubscriptionPlan"),
                        null,
                        null,
                        false
                );
            } else {
                System.out.println("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi username: " + username);
            }
        } catch (SQLException e) {
            System.err.println("L·ªói truy v·∫•n getUserInfoByUsername: " + e.getMessage());
            e.printStackTrace();
        }
        return null; // Kh√¥ng t√¨m th·∫•y user
    }

    public UUID getUserIdByUsername(String username) {
        String query = "SELECT UserID FROM Users WHERE Username = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return UUID.fromString(rs.getString("UserID"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public UUID getConversationIdByTitle(String title) {
        String query = "SELECT ConversationID FROM ChatHistory WHERE Title = ?";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, title);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return UUID.fromString(rs.getString("ConversationID"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public String getConversationId(UUID userId) {
        String query = "SELECT ConversationID FROM ChatHistory WHERE UserID = ? ORDER BY CreatedAt DESC LIMIT 1";
        try (Connection conn = getConnect(); PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setObject(1, userId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getString("ConversationID"); // L·∫•y ConversationID d·∫°ng String
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng c√≥ k·∫øt qu·∫£
    }
    
}
